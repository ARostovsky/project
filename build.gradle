apply plugin: 'groovy'

repositories {
    mavenCentral()
    maven {
        url "http://dl.bintray.com/jetbrains/teamcity-rest-client"
    }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.8'
    compile 'org.apache.ant:ant:1.9.4'
    if (teamcity_rest_client_version == 'sources') {
        compile project('../teamcity-rest-client')
    } else {
        compile "org.jetbrains.teamcity:teamcity-rest-client:$teamcity_rest_client_version"
    }
}

task runScript (dependsOn: 'classes', type: JavaExec) {
    main = 'patchtest'
    classpath = sourceSets.main.runtimeClasspath

    doFirst {
        def buildConfigurationID = project.hasProperty('buildConfigurationID') ? project.getProperty('buildConfigurationID') : null
        def buildID = project.hasProperty('buildID') ? project.getProperty('buildID') : null
        def customExtensions = project.hasProperty('customExtensions') ? project.getProperty('customExtensions') : ''
        def out = project.hasProperty('out') ? project.getProperty('out') : 'out'
        def platform = project.hasProperty('platform') ? project.getProperty('platform') : null
        def product = project.hasProperty('product') ? project.getProperty('product') : null
        def timeout = project.hasProperty('timeout') ? project.getProperty('timeout') : '60'

        if (product && platform && buildConfigurationID && buildID){
            args "'buildConfigurationID':'$buildConfigurationID', 'buildID': '$buildID', 'customExtensions':'$customExtensions', " +
                    "'out':'$out', 'platform':'$platform', 'product':'$product', 'timeout':'$timeout'"
        } else {
            throw new GradleException("Some args: {buildConfigurationID, buildID, platform, product} are undefined")
        }
    }
}
